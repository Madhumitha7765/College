#include<iostream>
using namespace std;


int merge(int arr[], int temp[], int left,
          int mid, int right) //merging
{
    int i, j, k;
    int lucky_count = 0;
    //i,j,k for left right and resultant arrays
    i = left;
    j = mid;
    k = left;
    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] % arr[j]==0||arr[j]%arr[i]==0) {
            temp[k++] = arr[i++];
        }
        else {
            temp[k++] = arr[j++];
            lucky_count = lucky_count + (mid - i);//if a[i] is greater then all the elements right to a[i] will be greater.
        }
    }


    while (i <= mid - 1)
        temp[k++] = arr[i++];


    while (j <= right)
        temp[k++] = arr[j++];


    for (i = left; i <= right; i++)
        arr[i] = temp[i];

    return lucky_count;
}
int count_lucky(int arr[],int temp[],int left,int right)
{
    int mid,lucky_count=0;
    if(left<right)
    {
        mid=(right+left)/2;
        /*lucky_count+=count_lucky(arr,temp,left,mid);
        lucky_count+=count_lucky(arr,temp,mid+1,right);*/

        lucky_count+=merge(arr,temp,left,mid+1,right);
    }
    return lucky_count;
}
int mergeSort(int arr[], int array_size)//sending temp array of size of i/p array
{
    int temp[array_size];
    return count_lucky(arr, temp, 0, array_size - 1);
}



int main()
{
    int i,n;
    cout<<"\n enter n:(even number)";
    cin>>n;
    int a[n];
    for(i=0;i<n;i++)
    cin>>a[i];
    cout<<"\n Lucky pairs:"<<mergeSort(a,n);
}
